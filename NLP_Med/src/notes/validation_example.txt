def main():
    # Загрузка данных
    (train_texts, val_texts, train_labels, val_labels), id2label = load_data(MARKED_PATH)
    
    # Инициализация модели
    tokenizer = DebertaV2Tokenizer.from_pretrained(MODEL_NAME)
    model = DebertaV2ForSequenceClassification.from_pretrained(
        MODEL_NAME,
        num_labels=len(id2label),
        id2label=id2label,
        label2id={v: k for k, v in id2label.items()}
    )
    
    # Создание DataLoader
    train_dataset = MedicalDataset(train_texts, train_labels, tokenizer, MAX_LEN)
    val_dataset = MedicalDataset(val_texts, val_labels, tokenizer, MAX_LEN)
    
    train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=2)
    val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, num_workers=2)
    
    # Настройка устройства и оптимизатора
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    model = model.to(device)
    
    optimizer = AdamW(model.parameters(), lr=LEARNING_RATE, correct_bias=False)
    scheduler = torch.optim.lr_scheduler.LinearLR(optimizer, total_iters=EPOCHS)
    
    # Список для хранения точности на валидации
    val_accuracies = []
    
    # Цикл обучения
    best_acc = 0
    for epoch in range(EPOCHS):
        print(f'\nEpoch {epoch + 1}/{EPOCHS}')
        train_loss = train_epoch(model, train_loader, optimizer, device, scheduler)
        val_acc = eval_model(model, val_loader, device, id2label)
        
        # Сохранение точности валидации
        val_accuracies.append(val_acc)
        
        # Сохранение лучшей модели
        if val_acc > best_acc:
            best_acc = val_acc
            model.save_pretrained(SAVE_PATH)
            tokenizer.save_pretrained(SAVE_PATH)
            print(f"New best model saved with accuracy {val_acc:.4f}")
        
        print(f'Train Loss: {train_loss:.4f} | Val Accuracy: {val_acc:.4f}')
    
    print("\nTraining completed!")
    
    # Построение графика точности валидации
    plt.figure(figsize=(10, 6))
    plt.plot(range(1, EPOCHS + 1), val_accuracies, marker='o', linestyle='-', color='b')
    plt.title('Validation Accuracy over Epochs')
    plt.xlabel('Epoch')
    plt.ylabel('Validation Accuracy')
    plt.grid(True)
    plt.xticks(range(1, EPOCHS + 1))
    plt.show()

if __name__ == '__main__':
    main()